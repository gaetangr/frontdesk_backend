{"version":3,"sources":["pages/auth/ResetPassword.js"],"names":["Alert","styled","MuiAlert","spacing","TextField","MuiTextField","Wrapper","Paper","props","theme","breakpoints","up","ResetPassword","dispatch","useDispatch","useHistory","React","useState","open","textReset","title","component","variant","align","gutterBottom","mt","mb","severity","autoHideDuration","initialValues","email","submit","validationSchema","Yup","shape","max","required","onSubmit","values","a","setErrors","setStatus","setSubmitting","resetPassword","axios","method","url","FRONTDESK_API","data","name","collaborator","headers","Authorization","TOKEN","then","res","message","success","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","noValidate","type","label","value","error","Boolean","fullWidth","helperText","onBlur","onChange","my","color","disabled"],"mappings":"wVAoBMA,EAAQC,YAAOC,KAAV,2EAAGD,CAAiBE,KAEzBC,EAAYH,YAAOI,KAAV,+EAAGJ,CAAqBE,KAEjCG,EAAUL,YAAOM,KAAV,6EAAGN,CAAH,uCACA,SAACO,GAAD,OAAWA,EAAMC,MAAMN,QAAQ,MAExC,SAACK,GAAD,OAAWA,EAAMC,MAAMC,YAAYC,GAAG,SAC3B,SAACH,GAAD,OAAWA,EAAMC,MAAMN,QAAQ,OAuH/BS,UAnHf,WACE,IAAMC,EAAWC,cADM,GAEPC,cACQC,IAAMC,UAAS,IAHhB,mBAGhBC,EAHgB,KAIjBC,GAJiB,KAIL,iCAmBlB,OACE,eAACb,EAAD,WACE,cAAC,IAAD,CAAQc,MAAOD,IAEf,cAAC,IAAD,CAAYE,UAAU,KAAKC,QAAQ,KAAKC,MAAM,SAASC,cAAY,EAAnE,SACGL,IAEH,cAAC,IAAD,CAAYE,UAAU,KAAKC,QAAQ,QAAQC,MAAM,SAAjD,2EAGA,eAACvB,EAAD,CAAOyB,GAAI,EAAGC,GAAI,EAAGC,SAAS,OAA9B,UACE,cAAC,IAAD,+CADF,+IAKA,cAAC,IAAD,CAAWT,KAAMA,EAAMU,iBAAkB,IAAzC,SACE,cAAC5B,EAAD,CAAQ2B,SAAS,UAAjB,8CAIF,cAAC,IAAD,CACEE,cAAe,CACbC,MAAO,gBACPC,QAAQ,GAEVC,iBAAkBC,MAAaC,MAAM,CACnCJ,MAAOG,MACJH,MAAM,gCACNK,IAAI,KACJC,SAAS,wBAEdC,SAAQ,uCAAE,WAAOC,EAAP,wBAAAC,EAAA,6DAAiBC,EAAjB,EAAiBA,UAAWC,EAA5B,EAA4BA,UAAWC,EAAvC,EAAuCA,cAAvC,kBAEA7B,EACJ8B,iBAjDVC,IAAM,CACJC,OAAQ,OACRC,IAAI,GAAD,OAAKC,IAAL,cACHC,KAAM,CACJC,KAAM,YACNC,aAAc,CAAC,IAEjBC,QAAS,CACPC,cAAc,SAAD,OAAWC,QAEzBC,MAAK,SAACC,SAoCK,uDASAC,EACJ,KAAMA,SAAW,2CAEnBf,EAAU,CAAEgB,SAAS,IACrBjB,EAAU,CAAET,OAAQyB,IACpBd,GAAc,GAdR,yDAAF,wDAXV,SA6BG,gBACCgB,EADD,EACCA,OACAC,EAFD,EAECA,WACAC,EAHD,EAGCA,aACAC,EAJD,EAICA,aACAC,EALD,EAKCA,aACAC,EAND,EAMCA,QACAzB,EAPD,EAOCA,OAPD,OASC,uBAAM0B,YAAU,EAAC3B,SAAUwB,EAA3B,UACGH,EAAO3B,QACN,cAAC/B,EAAD,CAAOyB,GAAI,EAAGC,GAAI,EAAGC,SAAS,UAA9B,SACG+B,EAAO3B,SAGZ,cAAC3B,EAAD,CACE6D,KAAK,QACLhB,KAAK,QACLiB,MAAM,gBACNC,MAAO7B,EAAOR,MACdsC,MAAOC,QAAQN,EAAQjC,OAAS4B,EAAO5B,OACvCwC,WAAS,EACTC,WAAYR,EAAQjC,OAAS4B,EAAO5B,MACpC0C,OAAQb,EACRc,SAAUb,EACVc,GAAI,IAEN,cAAC,IAAD,CACET,KAAK,SACLK,WAAS,EACThD,QAAQ,YACRqD,MAAM,UACNC,SAAUd,EALZ,SAOG3C","file":"static/js/27.b168b9f8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport styled from \"styled-components/macro\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport * as Yup from \"yup\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport { Formik } from \"formik\";\r\nimport axios from \"axios\";\r\nimport { resetPassword } from \"../../redux/actions/authActions\";\r\nimport { FRONTDESK_API, TOKEN } from \"../../constants/\";\r\nimport {\r\n  Button,\r\n  Paper,\r\n  TextField as MuiTextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { spacing } from \"@material-ui/system\";\r\nimport { Alert as MuiAlert, AlertTitle } from \"@material-ui/lab\";\r\n\r\nconst Alert = styled(MuiAlert)(spacing);\r\n\r\nconst TextField = styled(MuiTextField)(spacing);\r\n\r\nconst Wrapper = styled(Paper)`\r\n  padding: ${(props) => props.theme.spacing(6)}px;\r\n\r\n  ${(props) => props.theme.breakpoints.up(\"md\")} {\r\n    padding: ${(props) => props.theme.spacing(10)}px;\r\n  }\r\n`;\r\n\r\nfunction ResetPassword() {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const [open, setOpen] = React.useState(false);\r\n  const textReset = \"Reinitialiser le mot de passe\";\r\n\r\n\r\n  function createProperty() {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${FRONTDESK_API}/property/`,\r\n      data: {\r\n        name: \"REACT TES\",\r\n        collaborator: [1],\r\n      },\r\n      headers: {\r\n        Authorization: `Token ${TOKEN}`,\r\n      },\r\n    }).then((res) => {\r\n   \r\n    });\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Helmet title={textReset} />\r\n\r\n      <Typography component=\"h1\" variant=\"h4\" align=\"center\" gutterBottom>\r\n        {textReset}\r\n      </Typography>\r\n      <Typography component=\"h2\" variant=\"body1\" align=\"center\">\r\n        Veuillez renseigner votre email pour recevoir un mot de passe\r\n      </Typography>\r\n      <Alert mt={3} mb={2} severity=\"info\">\r\n        <AlertTitle>J'ai oublié mon adresse email</AlertTitle>\r\n        Si vous avez oublié votre email, ou vous ne recevez pas l'email de\r\n        changement de mot de passe, veuillez contacter votre administrateur\r\n      </Alert>\r\n      <Snackbar  open={open} autoHideDuration={6000} >\r\n        <Alert  severity=\"success\">\r\n          Un email a été envoyé\r\n        </Alert>\r\n      </Snackbar>\r\n      <Formik\r\n        initialValues={{\r\n          email: \"test@gmail.fr\",\r\n          submit: false,\r\n        }}\r\n        validationSchema={Yup.object().shape({\r\n          email: Yup.string()\r\n            .email(\"Doit être un email valide\")\r\n            .max(255)\r\n            .required(\"L'email est requis\"),\r\n        })}\r\n        onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n          try {\r\n            await dispatch(\r\n              resetPassword(\r\n                createProperty()\r\n              )\r\n            );\r\n            //history.push(\"/auth/sign-in\");\r\n          } catch (error) {\r\n            const message =\r\n              error.message || \"Quelque chose ne s'est pas bien passé\";\r\n\r\n            setStatus({ success: false });\r\n            setErrors({ submit: message });\r\n            setSubmitting(false);\r\n          }\r\n        }}\r\n      >\r\n        {({\r\n          errors,\r\n          handleBlur,\r\n          handleChange,\r\n          handleSubmit,\r\n          isSubmitting,\r\n          touched,\r\n          values,\r\n        }) => (\r\n          <form noValidate onSubmit={handleSubmit}>\r\n            {errors.submit && (\r\n              <Alert mt={2} mb={1} severity=\"warning\">\r\n                {errors.submit}\r\n              </Alert>\r\n            )}\r\n            <TextField\r\n              type=\"email\"\r\n              name=\"email\"\r\n              label=\"Adresse email\"\r\n              value={values.email}\r\n              error={Boolean(touched.email && errors.email)}\r\n              fullWidth\r\n              helperText={touched.email && errors.email}\r\n              onBlur={handleBlur}\r\n              onChange={handleChange}\r\n              my={3}\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              disabled={isSubmitting}\r\n            >\r\n              {textReset}\r\n            </Button>\r\n          </form>\r\n        )}\r\n      </Formik>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default ResetPassword;\r\n"],"sourceRoot":""}